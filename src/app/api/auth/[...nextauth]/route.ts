import { JWT } from 'google-auth-library';
import { GoogleSpreadsheet } from 'google-spreadsheet';
import NextAuth from 'next-auth';
import CredentialsProvider from 'next-auth/providers/credentials';
import GoogleProvider from 'next-auth/providers/google';

const handler = NextAuth({
  providers: [
    CredentialsProvider({
      // The name to display on the sign in form (e.g. "Sign in with...")
      name: 'パスワード',
      credentials: {
        username: { label: '名前', type: 'text' },
        password: { label: 'パスワード', type: 'password' },
      },
      async authorize(credentials, req) {
        // Add logic here to look up the user from the credentials supplied
        let user:
          | {
              email: string;
              name: string;
              id: string;
              role: string;
            }
          | undefined;
        // Any object returned will be saved in `user` property of the JWT
        const serviceAccountAuth = new JWT({
          // env var values here are copied from service account credentials generated by google
          // see "Authentication" section in docs for more info
          email: process.env.SA_CLIENT_EMAIL,
          key: process.env.SA_PRIVATE_KEY?.replace(/\\n/g, '\n'),
          scopes: ['https://www.googleapis.com/auth/spreadsheets'],
        });

        const doc = new GoogleSpreadsheet(
          process.env.USER_SPREADSHEET_ID!,
          serviceAccountAuth
        );
        await doc.loadInfo();
        const sheet = doc.sheetsByIndex[0];
        const rows = await sheet.getRows();
        const userDB = rows.find(
          (row) => row.get('ユーザーID') === credentials?.username
        );
        if (!userDB) {
          console.log('User not found');
        } else {
          if (userDB.get('パスワード') === credentials?.password) {
            user = {
              email: JSON.stringify({ role: userDB.get('権限') }),
              name: credentials?.username!,
              id: credentials?.username!,
              role: userDB.get('権限'),
            };
          } else {
          }
        }

        if (user) {
          return user;
        } else {
          // If you return null then an error will be displayed advising the user to check their details.
          return null;

          // You can also Reject this callback with an Error thus the user will be sent to the error page with the error message as a query parameter
        }
      },
    }),
  ],

  callbacks: {
    async signIn({ user, account, profile, email, credentials }) {
      return true;
    },
  },
});

export { handler as GET, handler as POST };
