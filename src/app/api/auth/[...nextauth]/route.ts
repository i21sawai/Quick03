import { JWT } from 'google-auth-library';
import { GoogleSpreadsheet } from 'google-spreadsheet';
import NextAuth from 'next-auth';
import CredentialsProvider from 'next-auth/providers/credentials';
import GoogleProvider from 'next-auth/providers/google';

const handler = NextAuth({
  providers: [
    CredentialsProvider({
      // The name to display on the sign in form (e.g. "Sign in with...")
      name: 'パスワード',
      credentials: {
        username: { label: '名前', type: 'text' },
        password: { label: 'パスワード', type: 'password' },
      },
      async authorize(credentials, req) {

        console.log('--- NextAuth Authorize Function Debug Log ---');
  console.log('SA_CLIENT_EMAIL:', process.env.SA_CLIENT_EMAIL);
  console.log('USER_SPREADSHEET_ID:', process.env.USER_SPREADSHEET_ID);

  // SA_PRIVATE_KEY は非常に機密性が高いため、文字列全体をログに出力するのは避けるべきです。
  // 存在確認だけであれば、以下のように部分的に表示するか、存在有無だけをログに出します。
  console.log('SA_PRIVATE_KEY_EXISTS:', !!process.env.SA_PRIVATE_KEY);
  if (process.env.SA_PRIVATE_KEY) {
      // 最初の30文字と末尾を示す...だけをログに出力
      console.log('SA_PRIVATE_KEY_START:', process.env.SA_PRIVATE_KEY.substring(0, 30) + '...');
  }

  // NEXTAUTH_SECRET も確認できますが、通常 authorize 関数内で直接使うことは稀です。
  // セッションの暗号化に使われるため、NextAuthの内部で自動的に参照されます。
  // ただし、設定されているか確認したい場合は以下のようにできます。
  console.log('NEXTAUTH_SECRET_IS_SET:', !!process.env.NEXTAUTH_SECRET);
  if (!process.env.NEXTAUTH_SECRET) {
      console.log('WARNING: NEXTAUTH_SECRET is not set!');
  }


  // ... 既存の認証ロジック（ユーザー名とパスワードの検証など）

  // ユーザーが見つからなかった場合のログも強化
  if (!userDB) {
    console.log('User not found in spreadsheet for username:', credentials?.username);
  } else {
    // パスワード不一致の場合のログも追加
    if (userDB.get('パスワード') !== credentials?.password) {
      console.log('Password mismatch for user:', credentials?.username);
    }
  }

  console.log('--- End NextAuth Authorize Function Debug Log ---');
        // Add logic here to look up the user from the credentials supplied
        let user:
          | {
              email: string;
              name: string;
              id: string;
              role: string;
            }
          | undefined;
        // Any object returned will be saved in `user` property of the JWT
        const serviceAccountAuth = new JWT({
          // env var values here are copied from service account credentials generated by google
          // see "Authentication" section in docs for more info
          email: process.env.SA_CLIENT_EMAIL,
          key: process.env.SA_PRIVATE_KEY?.replace(/\\n/g, '\n'),
          scopes: ['https://www.googleapis.com/auth/spreadsheets'],
        });

        const doc = new GoogleSpreadsheet(
          process.env.USER_SPREADSHEET_ID!,
          serviceAccountAuth
        );
        await doc.loadInfo();
        const sheet = doc.sheetsByIndex[0];
        const rows = await sheet.getRows();
        const userDB = rows.find(
          (row) => row.get('ユーザーID') === credentials?.username
        );
        if (!userDB) {
          console.log('User not found');
        } else {
          if (userDB.get('パスワード') === credentials?.password) {
            user = {
              email: JSON.stringify({ role: userDB.get('権限') }),
              name: credentials?.username!,
              id: credentials?.username!,
              role: userDB.get('権限'),
            };
          } else {
          }
        }

        if (user) {
          return user;
        } else {
          // If you return null then an error will be displayed advising the user to check their details.
          return null;

          // You can also Reject this callback with an Error thus the user will be sent to the error page with the error message as a query parameter
        }
      },
    }),
  ],

  callbacks: {
    async signIn({ user, account, profile, email, credentials }) {
      return true;
    },
  },
});

export { handler as GET, handler as POST };
